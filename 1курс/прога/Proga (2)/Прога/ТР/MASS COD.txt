#include "Mass.h"

bool IsNotEmpty(List a) {
	return a.n;//Переполнение? Не, не слышали...
}

void FirstElem(List &a) {
	int i = 0;
	while (a.Mass[i].Height < 0) {
		i++;
	}
	a.n = a.n + a.dop1 - i;
	a.dop1 = i;
	return;
}
bool NextElem(List &a) {
	if (a.Mass[a.dop1+1].Height < 0) {
		//printf("Ошибка, попытка выйти за пределы списка.");
		return false; 
	}
	a.dop1++; a.n--;
	return true;
}
bool PreviousElem(List &a) {
	if (a.Mass[a.dop1 - 1].Height < 0) { 
		//printf("Ошибка, попытка выйти за пределы списка."); 
		return false; 
	}
	a.dop1--;
	a.n++;
	return true;
}
void LastElem(List &a) {
	while (a.Mass[a.dop1+1].Height > 0) {
		a.dop1++;
	}
	a.n = 1;
}

void LogFile(List a, int argc, char* argv[]) {
	int CurN = a.n, Curdop1 = a.dop1;
	FILE* log = fopen(argv[3], "r+t");
	fseek(log, 0, SEEK_END);
	FirstElem(a);
	for (int i = a.dop1; i < a.dop1 + a.n; i++)
	{
		FPrintTInfo(a.Mass[i], log);
		fprintf(log, "\n");
	}
	a.n = CurN; a.dop1 = Curdop1;
	fprintf(log, "\n");
	fclose(log);
	system(argv[3]);
}

void CreateList(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
	if (IsNotEmpty(a)) { delete[] a.Mass; }//если не пуст, то удалить
	a.Mass = new TInfo[21];
	for (int i = 0; i < 10; i++) { a.Mass[i] = nulll; }
	a.Mass[10] = info;
	for (int i = 11; i < 21; i++) { a.Mass[i] = nulll; }
	a.dop1 = 10;
	a.n = 1;
	a.dop2 = 10;
	return;
}

void PushBack(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
	int CurN = a.n, Curdop1 = a.dop1;
	FirstElem(a);
	if (a.dop1) { a.Mass[--a.dop1] = info; a.n++; return; } //Надеюсь тута без копии надо...
	TInfo* buff = new TInfo[a.n + 11 + a.dop2];//А тута не куда деваться...
	for (int i = 0; i < 10; i++) { buff[i] = nulll; }
	buff[10] = info;
	for (int i = 0; i < a.n + a.dop2; i++) { buff[i + 11] = a.Mass[i]; }
	delete[] a.Mass;
	a.Mass = buff;
	a.n = ++CurN; a.dop1 = 10;
	return;
}

void PopBack(List &a, TInfo info) {
	CorrectTInfo(info);
	if (a.dop2--) { a.Mass[a.dop1 + a.n++] = info; return; } //Надеюсь тута без копии надо...
	TInfo* buff = new TInfo[a.dop1 + a.n + 11];//А тута не куда деваться...
	FirstElem(a);
	for (int i = 0; i < a.dop1 + a.n; i++) { buff[i] = a.Mass[i]; }
	buff[a.dop1 + a.n] = info;
	for (int i = a.dop1 + a.n + 1; i < a.dop1 + a.n + 11; i++) { buff[i] = nulll; }
	delete[] a.Mass;
	a.Mass = buff;
	a.n++;
	a.dop2 = 10;
	return;
}

void MedBack(List &a, TInfo info) {
	CorrectTInfo(info);
	if (a.n<2) {
		//printf("Ошибка");
		PopBack(a, info);
		return;
	}
	if (a.dop2--) {
		TInfo buff1, buff2;
		buff1 = a.Mass[a.dop1 + 1];
		a.Mass[a.dop1 + 1] = info;
		for (int i = a.dop1 + 2; i < a.dop1 + a.n; i++) {
			buff2 = a.Mass[i];
			a.Mass[i] = buff1;
			buff1 = buff2;
		}
		a.Mass[a.dop1 + (a.n++)] = buff1;
		return;
	}
	TInfo* temp = new TInfo[a.dop1 + a.n + 11];
	for (int i = 0; i < a.dop1 + 1; i++) { temp[i] = a.Mass[i]; }
	temp[a.dop1 + 1] = info;
	for (int i = a.dop1 + 1; i < a.dop1 + a.n; i++) { temp[i + 1] = a.Mass[i]; }
	for (int i = a.dop1 + a.n + 1; i < a.dop1 + a.n + 11; i++) { temp[i] = nulll; }
	delete [] a.Mass;
	a.Mass = temp;
	a.n++;
	a.dop2 = 10;
}

void DeleteFirst(List &a) {
	int CurN = a.n, Curdop1 = a.dop1;
	FirstElem(a);
	if (!IsNotEmpty(a)) {
		//printf("Ошибка");
		return;
	}
	a.Mass[a.dop1++] = nulll;
	if ((a.n--) == CurN) {
		return;
	}
	a.n = CurN; a.dop1 = Curdop1;
	return;
}

void DeleteLast(List &a) {
	if (!IsNotEmpty(a)) {
		//printf("Ошибка");
		return;
	}
	a.Mass[a.dop1 + a.n - 1] = nulll;
	a.dop2++;
	if (a.n == 1) { a.dop1--; return; }
	a.n--;
}

void DeleteMedium(List &a) {
	if (a.n < 2) {
		//printf("Ошибка");
		return;
	}
	for (int i = a.dop1 + 2; i < a.dop1 + a.n; i++)
	{
		a.Mass[i - 1] = a.Mass[i];
	}
	a.Mass[a.dop1 + a.n - 1] = nulll;
	a.n--;
	a.dop2++;
	return;
}

TInfo getTInfo(List a) { return a.Mass[a.dop1]; }