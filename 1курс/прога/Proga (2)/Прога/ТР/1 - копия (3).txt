#include "FILE.h"	
#include <time.h>



TInfo nulll;
int Position = 0;

void CorrectTInfo(TInfo &a) {
	time_t t;
	struct tm *nabor;
	time(&t);
	nabor = localtime(&t);
	if ((nabor->tm_year + 1900 - a.Year) < 5) { a.Year = 5; }
	else if ((nabor->tm_year + 1900 - a.Year) > 14) {a.Year = 14;}
	if (a.Weight < 1) { a.Weight = 1; } 
	else if (a.Weight > 200) { a.Weight = 200; }
	if (a.Height > 200) { a.Weight = 1; }
	else if (a.Height > 200) { a.Height = 200; }
}

void FPrintTInfo(TInfo a, FILE* buff) {
	fprintf(buff, "FN:%s ", a.FirstName);
	fprintf(buff, "LN:%s ", a.LastName);
	fprintf(buff, "Y:%d ", a.Year);
	fprintf(buff, "W:%d ", a.Weight);
	fprintf(buff, "H:%d", a.Height);
}
void FScanTInfo(TInfo &a, FILE* txt) {
	fscanf(txt, "%s", a.FirstName);
	fscanf(txt, "%s", a.LastName);
	fscanf(txt, "%d", &a.Year);
	fscanf(txt, "%d", &a.Weight);
	fscanf(txt, "%d", &a.Height);
}
void ScanTInfo(TInfo &a) {
	scanf("%30s", a.FirstName);
	scanf("%30s", a.LastName);
	scanf("%d", &a.Year);
	scanf("%d", &a.Weight);
	scanf("%d", &a.Height);
}

bool IsNotEmpty(List a) {
	return a.n;//Переполнение? Не, не слышали...
}

void CreateList(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
#ifndef MoreFilesMOREMOREMORE
	a.bin = freopen(argb[1], "w+b", a.bin);
#else
	char name[16] = {};
	scanf("%s", name);
	a.bin = freopen(name, "w+b", a.bin);
#endif // !MoreFilesMOREMOREMORE
	for (int i = 0; i < 10; i++)
		{
			fwrite(&nulll, sizeof(TInfo), 1, a.bin);
		}	
	fwrite(&info, sizeof(TInfo), 1, a.bin);
	a.dop1 = 10;
	a.n = 1;
}

void PushBack(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
	if (a.dop1) {
		fseek(a.bin, (--a.dop1) * sizeof(TInfo), SEEK_SET);
		fwrite(&info, sizeof(TInfo), 1, a.bin);
		a.n++;
		return;
	}
	TInfo temp;
	FILE * buff;
	buff = fopen("bbbbb.bin", "wb"); //
	for (int i = 0; i < 10; i++)
	{
		fwrite(&nulll, sizeof(TInfo), 1, buff);
	}
	fwrite(&info, sizeof(TInfo), 1, buff);
	for (int i=0; i<a.n; i++)
	{
		fseek(a.bin, 0, SEEK_SET);
		fread(&temp, sizeof(TInfo), 1, a.bin);
		fwrite(&temp, sizeof(TInfo), 1, buff);
	}
	fclose(a.bin);
	fclose(buff);
	remove(argv[1]);
	rename("bbbbb.bin", argv[1]);
	a.bin = fopen(argv[1], "r+b"); //
	a.n++;
	a.dop1 = 10;
}

void PopBack(List &a, TInfo info) {
	CorrectTInfo(info);
	fseek(a.bin, (a.dop1 + a.n) * sizeof(TInfo), SEEK_SET);
	fwrite(&info, sizeof(TInfo), 1, a.bin);
	a.n++;
}

void MedBack(List &a, TInfo info) {
	CorrectTInfo(info);
	TInfo buff1, buff2;
	fseek(a.bin, (a.dop1 + a.Position + 1) * sizeof(TInfo), SEEK_SET);
	fread(&buff1, sizeof(TInfo), 1, a.bin);
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_CUR);
	fwrite(&info, sizeof(TInfo), 1, a.bin);
	for (int i = 0; i < a.n - a.Position; i++)
	{
		fread(&buff2, sizeof(TInfo), 1, a.bin);
		fseek(a.bin, 0 - sizeof(TInfo), SEEK_CUR);
		fwrite(&buff1, sizeof(TInfo), 1, a.bin);
		buff1 = buff2;
	}
	a.n++;
}

void DeleteFirst(List &a) {
	if (!IsNotEmpty(a)) { printf("Ошибка"); return; }
	fseek(a.bin, a.dop1 * sizeof(TInfo), SEEK_SET);
	fwrite(&nulll, sizeof(TInfo), 1, a.bin);
	a.n--;
	a.dop1++;
}

void DeleteLast(List &a) {
	if (!IsNotEmpty(a)) { printf("Ошибка"); return; }
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_END);
	fwrite(&nulll, sizeof(TInfo), 1, a.bin);
	a.n--;
}

void DeleteMedium(List &a) {
	TInfo buff;
	int i = 0 - 2;
	if ((a.n < a.Position) && (!IsNotEmpty(a))) { printf("Ошибка"); return; }
	fseek(a.bin, (a.dop1 + a.Position + 2) * sizeof(TInfo), SEEK_SET);
	for (int i = 0; i < a.n - a.Position - 2; i++)
	{
		fread(&buff, sizeof(TInfo), 1, a.bin);
		fseek(a.bin, i * sizeof(TInfo), SEEK_CUR);
		fwrite(&buff, sizeof(TInfo), 1, a.bin);
		fseek(a.bin, sizeof(TInfo), SEEK_CUR);
	}
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_CUR);
	fwrite(&nulll, sizeof(TInfo), 1, a.bin);
	a.n--;
}

void FirstElem(List &a) { 
	a.Position = 0;
	fseek(a.bin, (a.dop1) * sizeof(TInfo), SEEK_SET);
}
void NextElem(List &a) {
	if (a.Position == a.n - 1) {
		printf("Ошибка, попытка выйти за пределы списка.");
		return;
	}
	a.Position++;
	fseek(a.bin, sizeof(TInfo), SEEK_CUR);
}
void PreviousElem(List &a) {
	if (a.Position == 0) {
		a.Position = 0;
		printf("Ошибка, попытка выйти за пределы списка.");
		return;
	}
	a.Position--;
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_CUR);
}
void LastElem(List &a) {
	a.Position = a.n - 1; 
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_END);
}

TInfo getTInfo(List a) {
	TInfo buff; 
	fseek(a.bin, (a.dop1 + a.Position)*sizeof(TInfo), SEEK_SET);
	fread(&buff, sizeof(TInfo), 1, a.bin);
	fseek(a.bin, 0 - sizeof(TInfo), SEEK_CUR);
	return buff;
}

void LogFile(List a, int argc, char* argv[]) {
	FILE* log;
	system("TASKKILL /IM notepad.exe");
	log = fopen(argv[3], "r+t");
	fseek(log, 0, SEEK_END);
	for (int i = a.dop1; i < a.dop1 + a.n; i++)
	{
		TInfo buff;
		fseek(a.bin, a.dop1 * sizeof(TInfo), SEEK_SET);
		fread(&buff, sizeof(TInfo), 1, a.bin);
		FPrintTInfo(buff, log);
		fprintf(log, "\n");
	}
	fseek(a.bin, (a.dop1 + a.Position) * sizeof(TInfo), SEEK_SET);
	fprintf(log, "\n");
	fclose(log);
	system(argv[3]);
}

