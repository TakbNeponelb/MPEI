#include "Mass.h"
#include <time.h>
TInfo nulll;


bool IsNotEmpty(List a) {
	return a.n;//Переполнение? Не, не слышали...
}

void CorrectTInfo(TInfo &a) {
	time_t t;
	struct tm *nabor;
	time(&t);
	nabor = localtime(&t);
	if ((nabor->tm_year + 1900 - a.Year) < 5) { a.Year = 5; }
	else if ((nabor->tm_year + 1900 - a.Year) > 14) { a.Year = 14; }
	if (a.Weight < 1) { a.Weight = 1; }
	else if (a.Weight > 200) { a.Weight = 200; }
	if (a.Height > 200) { a.Weight = 1; }
	else if (a.Height > 200) { a.Height = 200; }
}

void CreateList(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
	if (IsNotEmpty(a)) { delete[] a.Mass; }//если не пуст, то удалить
	a.Mass = new TInfo[21];
	a.Mass[10] = info;
	a.dop1 = 10;
	a.n = 1;
	a.dop2 = 10;
}

void PushBack(List &a, TInfo info, int argc, char* argv[]) {
	CorrectTInfo(info);
	if (a.dop1) { a.Mass[a.dop1--] = info; a.n++; return; } //Надеюсь тута без копии надо...
	TInfo* buff = new TInfo[a.n + 21];//А тута не куда деваться...
	buff[10] = info;
	for (int i = 0; i < a.n; i++) { buff[i + 11] = a.Mass[i]; }
	delete[] a.Mass;
	a.Mass = buff;
	a.n++;
	a.dop1 = 10;
	a.dop2 = 10;
}

void PopBack(List &a, TInfo info) {
	CorrectTInfo(info);
	if (a.dop2--) { a.Mass[a.dop1 + a.n++] = info; return; } //Надеюсь тута без копии надо...
	TInfo* buff = new TInfo[a.n + 21];//А тута не куда деваться...
	buff[10+a.n] = info;
	for (int i = 0; i < a.n; i++) { buff[i + 10] = a.Mass[a.dop1 + i]; }
	delete[] a.Mass;
	a.Mass = buff;
	a.n++;
	a.dop1 = 10;
	a.dop2 = 10;
}

void MedBack(List &a, TInfo info) {
	CorrectTInfo(info);
	if (a.n < a.Position) { printf_s("Ошибка"); return; }
	if (a.dop2--) {
		TInfo buff1, buff2;
		buff1 = a.Mass[a.dop1 + a.Position+1];
		a.Mass[a.dop1 + a.Position+1] = info;
		for (int i = a.dop1 + a.Position + 2; i < a.dop1 + a.n; i++) {
			buff2 = a.Mass[i];
			a.Mass[i] = buff1;
			buff1 = buff2;
		}
		a.Mass[a.dop1 + a.n++] = buff1;
		return;
	}
	TInfo* temp;
	temp = new TInfo[a.n + 21];
	temp[a.Position + 11] = info;
	for (int i = 0; i < a.Position+1; i++) {
		temp[10+i] = a.Mass[a.dop1+i];
	}
	for (int i = a.Position + 1; i < a.n; i++) {
		temp[11+i] = a.Mass[a.dop1+i];
	}
	delete [] a.Mass;
	a.Mass = temp;
	a.n++;
	a.dop1 = 10;
	a.dop2 = 10;
}

void DeleteFirst(List &a) {
	if (!IsNotEmpty(a)) { printf_s("Ошибка"); return; }
	a.dop1++;
	a.n--;
	a.Mass[a.dop1] = nulll;
}

void DeleteLast(List &a) {
	if (!IsNotEmpty(a)) { printf_s("Ошибка"); return; }
	a.dop2++;
	a.n--;
	a.Mass[a.dop1+a.n-1] = nulll;
}

void DeleteMedium(List &a) {
	if ((a.n < a.Position)&&(!IsNotEmpty(a))) { printf_s("Ошибка"); return; }
	for (int i = a.dop1 + a.Position + 1; i < a.dop1 + a.n; i++)
	{
		a.Mass[i - 1] = a.Mass[i];
	}
	a.Mass[a.dop1 + a.n - 1] = nulll;
}

#ifndef tinfo
void FirstElem(List &a) { a.Position = 0; }
void NextElem(List &a) { if (a.Position == a.n - 1) { a.Position = a.n - 1; printf_s("Ошибка, попытка выйти за пределы списка."); return; } a.Position++; }
void PreviousElem(List &a) { if (a.Position == 0) { a.Position = 0; printf_s("Ошибка, попытка выйти за пределы списка."); return; } a.Position--; }
void LastElem(List &a) { a.Position = a.n - 1; }
#else
TINfo FirstElem(List &a) { a.Position = 0; return a.Mass[a.dop1 + a.Position]; }
TINfo NextElem(List &a) { if (a.Position == a.n - 1) { printf_s("Ошибка, попытка выйти за пределы списка."); return a.Mass[a.dop1 + a.Position]; } a.Position++; return a.Mass[a.dop1 + a.Position]; }
TINfo PreviousElem(List &a) { if (a.Position == 0) { printf_s("Ошибка, попытка выйти за пределы списка."); return a.Mass[a.dop1]; } a.Position--; return a.Mass[a.dop1 + a.Position]; }
TInfo LastElem(List &a) { a.Position = a.n - 1; return a.Mass[a.dop1 + a.Position]; }
#endif // tinfo

void FPrintTInfo(TInfo a, FILE* buff) {
	fprintf_s(buff, "FN:%s ", a.FirstName);
	fprintf_s(buff, "LN:%s ", a.LastName);
	fprintf_s(buff, "Y:%d ", a.Year);
	fprintf_s(buff, "W:%d ", a.Weight);
	fprintf_s(buff, "H:%d ", a.Height);
}

void FScanTInfo(TInfo &a, FILE* txt) {
	fscanf_s(txt, "%s \t", a.FirstName);
	fscanf_s(txt, "%s \t", a.LastName);
	fscanf_s(txt, "%d \t", a.Year);
	fscanf_s(txt, "%d \t", a.Weight);
	fscanf_s(txt, "%d \t", a.Height);
}

void ScanTInfo(TInfo &a) {
	scanf_s("%s", a.FirstName);
	scanf_s("%s", a.LastName);
	scanf_s("%d", a.Year);
	scanf_s("%d", a.Weight);
	scanf_s("%d", a.Height);
}

#ifndef tinfo
TInfo getTInfo(List a) { return a.Mass[a.dop1 + a.Position-1]; }
#endif // DEBUG
void LogFile(List a, int argc, char* argv[]) {
	FILE* log;
	system("TASKKILL /IM notepad.exe");
	fopen_s(&log, argv[3], "r+t");
	fseek(log, 0, SEEK_END);
	for (int i = a.dop1; i < a.dop1+a.n; i++)
	{
		FPrintTInfo(a.Mass[i], log);
		fprintf_s(log, "\n");
	}
	fprintf_s(log, "\n");
	fclose(log);
	system(argv[3]);
}