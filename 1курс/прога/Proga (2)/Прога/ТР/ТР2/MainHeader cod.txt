#include "MainHeader.h"

void DeleteAll(List &a) {
	FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Удалить все элементы из списка\n"); fclose(log);
	while (IsNotEmpty(a)) {
		DeleteFirst(a);
	}
}

void AddTXT(List &a, int argc, char* argv[]) {
	FILE* log = fopen("Log.txt", "r+t");
	fseek(log, 0, SEEK_END);
	fprintf(log, "Добавить элементы с текстового файла ");
	FILE* txt = fopen(argv[2], "rt");
	TInfo info;
	int ch, i = 0;
	if (!IsNotEmpty(a)) {
		FScanTInfo(info, txt);
		CreateList(a, info, argc, argv);
		while (!feof(txt)) {
			FScanTInfo(info, txt);
			PopBack(a, info);
		}
		fprintf(log, "в пустой список\n");
		fclose(txt);
		fclose(log);
		return;
	}
	printf("1 - В начало\n2 - После текущего\n3 - В конец");
	printf("\nВаш выбор: ");
	scanf("%d", &ch);
	switch (ch)
	{
	case 1:
		fprintf(log, "в начало\n");
		FScanTInfo(info, txt);
		PushBack(a, info, argc, argv);
		FirstElem(a);
		while (!feof(txt)) {
			FScanTInfo(info, txt);
			MedBack(a, info);
			NextElem(a);
			i++;
		}
		for (int j = 0; j < i; j++) { PreviousElem(a); }
		break;

	case 2:
		fprintf(log, "после текущего\n");
		while (!feof(txt)) {
			FScanTInfo(info, txt);
			MedBack(a, info);
			NextElem(a);
			i++;
		}
		for (int j = 0; j < i; j++) {
			PreviousElem(a);
		}
		break;
	case 3:
		fprintf(log, "в конец\n");
		while (!feof(txt)) {
			FScanTInfo(info, txt);
			PopBack(a, info);
			i++;
		}break;
	default:printf("Неправильная команда!"); fprintf(log, "Пользователь ввел некорректные данные\n");
		break;
	}
	fclose(log);
}

void AddConsole(List &a, int argc, char* argv[]) {
	int e;
	do
	{
	FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Добавить элемент с консоли ");
	int ch;
	TInfo info;
	int i = 1;
	if (!IsNotEmpty(a)) {
		ScanTInfo(info);
		CreateList(a, info, argc, argv);
	}
	else {
		printf("1 - В начало\n2 - После текущего\n3 - В конец");
		printf("\nВаш выбор: ");
		scanf("%d", &ch);
		switch (ch)
		{
		case 1:
			fprintf(log, "в начало\n");
			ScanTInfo(info);
			PushBack(a, info, argc, argv);
			break;

		case 2:
			fprintf(log, "после текущего\n");
			ScanTInfo(info);
			MedBack(a, info);
			break;
		case 3:
			fprintf(log, "в конец\n");
			ScanTInfo(info);
			PopBack(a, info);
			break;
		case 4:
			for (int i = 0; i < 11; i++) { PushBack(a, getTInfo(a), argc, argv); }
			break;
		default:printf("Неправильная команда!"); fprintf(log, "Пользователь ввел некорректные данные\n");
			break;
		}
	}
	fclose(log);
	printf("Добавить еще?\n0 -  Нет\n");
	scanf("%d", &e);
	} while (e!=0);
}

void DeleteN(List &a) {
	int ch, i = 0, n;
	printf("Введите кол-во элементов для удаления: ");
	scanf("%d", &n);
	FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Удалить %d элементов ", n);
	printf("1 - Из начала\n2 - После текущего\n3 - Из конца");
	printf("\nВаш выбор: ");
	scanf("%d", &ch);
	switch (ch)
	{
	case 1: fprintf(log, "из начала\n"); while (IsNotEmpty(a) && (i < n)) { DeleteFirst(a); i++; } break;
	case 2: fprintf(log, "после текущего\n"); while (IsNotEmpty(a) && (i < n)) { DeleteMedium(a); i++; } break;
	case 3: fprintf(log, "из конца\n"); while (IsNotEmpty(a) && (i < n)) { DeleteLast(a); i++; } break;
	default:printf("Неправильная команда!"); fprintf(log, "Пользователь ввел некорректные данные\n"); break;
	}
	fclose(log);
}

void FirstElement(List &a) { FirstElem(a); FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Перейти к первому элементу\n"); fclose(log); }
bool NextElement(List &a) {
	FILE* log = fopen("Log.txt", "r+t");
	if (NextElem(a)) {
		fseek(log, 0, SEEK_END);
		fprintf(log, "Перейти к следующему элементу\n");
		fclose(log);
		return true;
	}
	printf("Ошибка! Попытка выйти за пределы списка!\n");
	fprintf(log, "Ошибка! Попытка выйти за пределы списка!\n");
	fclose(log);
	return false;
}
bool PreviousElement(List &a) {
	FILE* log = fopen("Log.txt", "r+t");
	if (PreviousElem(a)) {
		fseek(log, 0, SEEK_END);
		fprintf(log, "Перейти к предыдущему элементу\n");
		fclose(log);
		return true;
	}
	printf("Ошибка! Попытка выйти за пределы списка!\n");
	fprintf(log, "Ошибка! Попытка выйти за пределы списка!\n");
	fclose(log);
	return false;
}
void LastElement(List &a) { LastElem(a); FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Перейти к последнему элементу\n"); fclose(log); }

void RunTo(List &a) {
	int i;
	do
	{
		printf("1 - первый\n2 - следующий\n3 - предыдущий\n4 - последний\n0 - Остаться на этом элементе");
		printf("\nВаш выбор: ");
		scanf("%d", &i);
		switch (i) {
		case 1:FirstElement(a); break;
		case 2:NextElement(a); break;
		case 3:PreviousElement(a); break;
		case 4:LastElement(a); break;
		case 0: break;
		default:printf("Неправильная команда!"); break;
		}
	} while (i != 0);
}

void DeleteThis(List &a, int argc, char* argv[]) {
	FILE* log = fopen("Log.txt", "r+t"); fseek(log, 0, SEEK_END); fprintf(log, "Фильтр, удаление и удвоение элементов списка по условию\n"); fclose(log);
	FirstElem(a);
	while (!Uslov(getTInfo(a)) && IsNotEmpty(a)) {
		DeleteFirst(a);
	}
	if (Uslov(getTInfo(a)) && IsNotEmpty(a)) {
		MedBack(a, getTInfo(a));
		NextElem(a);
	}
	while (NextElem(a)) {
		if (Uslov(getTInfo(a))) {
			MedBack(a, getTInfo(a));
			NextElem(a);
		}
		else if (getTInfo(a).Height > 0) {
			PreviousElem(a);
			DeleteMedium(a);
		}
	}
}

void CleanLogFile(int argc, char* argv[]) { FILE* log = fopen(argv[3], "wt"); fclose(log); }